name: Deploy in Github Pages
on: 
  push:
    paths:
    - 'slides/**'

permissions: 
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm install
      - name: Install slidev
        run:  npm i -g @slidev/cli
      - name: Get modified slide directories
        run: |
          # Get the list of modified files
            modified_files=$(git show ${{ github.sha }} --name-only | grep "^slides/.*/.*\.\(md\|vue\|ts\|tsx\|js\|jsx\|html\|css\)$")

            echo "Modified files: $modified_files"

            # Temporary file to store directories
            temp_file=$(mktemp)

            # Loop through modified files and find the closest parent directory with a markdown file
            for file in $modified_files; do
              dir=$(dirname "$file")

              # Traverse up the directory tree to find a parent with a .md file
              while [ "$dir" != "." ]; do
                if ls "$dir"/*.md >/dev/null 2>&1; then
                  echo "$dir" >> "$temp_file"
                  break
                fi
                dir=$(dirname "$dir")
              done
            done

            echo "Directories with markdown files: $(cat $temp_file)"

            # Remove duplicates and store the result in modified_dirs
            modified_dirs=$(sort "$temp_file" | uniq | tr '\n' ' ')

            # Clean up temporary file
            rm "$temp_file"

            echo "Unique modified directories: $modified_dirs"

            # Output the modified directories to be used as an environment variable
            echo "modified_dirs=${modified_dirs}" >> $GITHUB_ENV

      - name: Create build directory
        run: |
            mkdir -p build
            for dir in ${{ env.modified_dirs }}; do
              mkdir -p build/$(echo "$dir" | awk -F'slides/' '{print $2}')
            done

      - name: Build modified slides
        if: env.modified_dirs != ''
        run: |
            for dir in ${{ env.modified_dirs }}; do
              slidev build --base /lectures/$(echo "$dir" | awk -F'slides/' '{print $2}') $dir/slides.md
              mv $dir/dist/* build/$(echo "$dir" | awk -F'slides/' '{print $2}') -v
            done

      - name: Build modified slides
        if: env.modified_dirs != ''
        run: |
              # Temporary file to store links
              temp_links_file=$(mktemp)

              # Read existing links from index.html if it exists
              if [[ -f build/index.html ]]; then
                grep '<li><a href="' build/index.html | sed -E 's|.*<a href="([^"]*)".*|\1|' > "$temp_links_file"
              fi

              # Build the modified slides and collect new links
              for dir in ${{ env.modified_dirs }}; do
                # Generate the relative link path (without index.html) and append to temp file
                echo "$(echo "$dir" | awk -F'slides/' '{print $2}')" >> "$temp_links_file"
              done

              # Sort the links lexicographically and remove duplicates
              sorted_links=$(sort "$temp_links_file" | uniq)

              # Begin writing the new index.html in the lectures directory
              {
                echo '<!DOCTYPE html>'
                echo '<html lang="en">'
                echo '<head>'
                echo '  <meta charset="UTF-8">'
                echo '  <meta name="viewport" content="width=device-width, initial-scale=1.0">'
                echo '  <link rel="stylesheet" href="../index.css">'
                echo '  <title>Slide Presentations</title>'
                echo '</head>'
                echo '<body>'
                echo '  <h1>Slide Presentations</h1>'
                echo '  <ul>'

                # Add sorted links to index.html
                for link in $sorted_links; do
                  echo "    <li><a href=\"$link/\">$link</a></li>"
                done

                echo '  </ul>'
                echo '</body>'
                echo '</html>'
              } > build/index.html

              # Clean up temporary files
              rm "$temp_links_file"
          

      - name: Deploy slides ðŸš€
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: build # The folder the action should deploy.
          target-folder: ''
          clean: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}